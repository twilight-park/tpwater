<html>
<head>
  <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.4/chartist.min.css"> -->
  <link rel="stylesheet" href="/ui/chartist.min.css">
  <style type="text/css">
    .chart#flowChart {
        height: 40%;
        width: 100%;
    }
    .chart#tankChart {
        height: 25%;
        width: 100%;
    }
    .chartTitle {
        margin: 5px;
    }
    .ct-series-a .ct-line {
        stroke: blue;
        stroke-width: 2;
    }
    .hdr {
        display: inline;
        position: fixed;
        width: 95%
    }
    .buthdr {
        display: inline;
    }
    .hdr h4 {
        display: inline;
    }
    .hdr h1 {
        display: inline;
        font-weight: bold;
        font-size: 40px;
    }
    .hdr span {
        float: right;
    }
    div.buttons {
        display: flex;
        justify-content: space-around;
        position: fixed;
        bottom: 15%;
        width: 100%;
    }
    .buthdr button {
        display: inline;
        font-weight: bold;
        font-size: 125%;
    }
  </style>

  <script type="module"> 
      // import { LineChart, FixedScaleAxis } from 'https://esm.sh/chartist';
      import { LineChart, FixedScaleAxis } from '/ui/chartist.mjs';

      var dataLast;
      const dataStale = 120*1000;
      const spinRate = 250;
      var spinState = 0;

      var page = null;

      var flowChart;
      var tankChart;

      function reloadPage() {
        location.reload(true);
      }
      
      [< ticker]

      function selectData(rawData, i, n) {
        const data = rawData.map(d => ({ x: new Date(d[0]*1000), y: d[i] }));
        const last = data[data.length-1].y;

        return { data: data, last: last }
      }

      function updateCharts() {
        const lookback = document.getElementById("lookback");

        // const url = `/query/log/-2h/-30`;
        const url = `/query/log/-${lookback.value}/-30`;

        fetch(url)
            .then(response => response.json())
            .then(data => {

                const { data: flowData, last: flowLast } = selectData(data, 1, 10);
                const { data: tankData, last: tankLast } = selectData(data, 2, 10);

                dataLast = new Date(data[data.length-1][0] * 1000);

                document.getElementById("dataLast").textContent = dataLast.toLocaleString();
                document.getElementById("flowLast").textContent = typeof flowLast === 'number' ? flowLast.toFixed(0) + " GPM" : flow;
                document.getElementById("tankLast").textContent = typeof tankLast === 'number' ? tankLast.toFixed(0) + "%" : tank;

                flowChart.update({ series: [flowData] });
                tankChart.update({ series: [tankData] });
            }
        );
      }

      function updatePage() {
        const url = "/values?page=monitor";

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if ( page != null && page != data.page ) {
                    reloadPage()
                }
                page = data.page;

                document.getElementById("golf").textContent = typeof data.golf === "number" ? (data.golf ? "Golf Course :  ON" : "Golf Course : OFF") : "Golf Course : ???";
                document.getElementById("golf").style.color = typeof data.golf === "number" && data.golf ? "green" : "blue";
                document.getElementById("thrd").textContent = typeof data.thrd === "number" ? (data.thrd ? "Third Level :  ON" : "Third Level : OFF") : "Third Level : ???";
                document.getElementById("thrd").style.color = typeof data.thrd === "number" && data.thrd ? "green" : "blue";
            }
        );
      }

      function press(b) {
        fetch(`/press?button=${b}`).then(response => {});
      }

    const chartOptions = {
      low: 0,
      showPoint: false,
      showGrid: false,
      axisX: { 
          showGrid: false,
          type: FixedScaleAxis,
          divisor: 7,
          labelInterpolationFnc: value =>
            new Date(value).toLocaleString(undefined, {
              month: 'short',
              day: 'numeric',
              hour: 'numeric',
              minute: 'numeric'
              })
      },
      axisY: { 
        showGrid: false,
        onlyInteger: true
      }
    }
    const flowChartOptions = {
        ... chartOptions,
        low:   0,
        high:  [!flow get max]
    }
    const tankChartOptions = {
        ... chartOptions,
        low:   0,
        high:  [!tank get max],
        ticks: [0, 25, 50, 75, 100]
    }

    function loadPage() {
        flowChart = new LineChart("#flowChart", { series: [[]] }, flowChartOptions);
        tankChart = new LineChart("#tankChart", { series: [[]] }, tankChartOptions);

        updateCharts();
    }

    function logout() {
        window.location="/logout";
    }

    setInterval(() => { ticker(); }, spinRate);
    setInterval(() => { updatePage(); }, 2000);
    setInterval(() => { updateCharts(); }, 20000);
    setInterval(() => { reloadPage(); }, 1000*60*60);

    window.loadPage = loadPage;
    window.updateCharts = updateCharts;
    window.updatePage = updatePage;
    window.logout = logout;
    window.press = press;
  </script>
</head>

<body onLoad="loadPage()">
    <div class="hdr">
        <h4><b>Twilight Park Water Monitor</b>
            &nbsp:&nbsp
            <text id=dataLast>Timer</text>
            &nbsp:&nbsp
            <text id=spinner>spinner</text>
        </h4>
        <span>
            Look Back 
            <select name="lookback" id="lookback" onChange="updateCharts();">
                  <option value="1h">Hour</option>
                  <option value="1d" selected>Day</option>
                  <option value="1w">Week</option>
                  <option value="1t">Month</option>
            </select>
            &nbsp
            <button onClick='logout()'>Logout</button>
        </span>
    </div>
    <br>
    <br>
    <div style="clear:both"></div>

    <div>
    <div class="hdr"> <center><h1 class="chartTitle">Water Flow<span id=flowLast>Flow</span></h1></center></div>
    <div id="flowChart" class="chart"></div>
    </div>

    <div>
    <div class="hdr"> <center><h1 class="chartTitle">Tank Level<span id=tankLast>Tank</span></h1></center></div>
    <div id="tankChart" class="chart"></div>
    </div>

    <div><br></div>
    <div class=buttons>
        <div class="buthdr"> <h1 class="chartTitle"><button id="golf" onClick="press('golf')">Golf Course</button></h1></div>
        <div class="buthdr"> <h1 class="chartTitle"><button id="thrd" onClick="press('thrd')">Third Level</button></h1></div>
    </div>
</body>
</html>
